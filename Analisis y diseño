// Implementación del programa de búsqueda binaria

int binary_search(int arr[], int l, int r, int x) {
    if (r >= l) {
        int mid = l + (r - l) / 2;
        if (arr[mid] == x)
            return mid;
        if (arr[mid] > x)
            return binary_search(arr, l, mid - 1, x);
        return binary_search(arr, mid + 1, r, x);
    }
    return -1;
}

// Complejidad: O(log n)

// Implementación del programa de stoogesort

void stoogesort(int arr[], int l, int h) {
    if (l >= h)
        return;
    if (arr[l] > arr[h])
        swap(arr[l], arr[h]);
    if (h - l + 1 > 2) {
        int t = (h - l + 1) / 3;
        stoogesort(arr, l, h - t);
        stoogesort(arr, l + t, h);
        stoogesort(arr, l, h - t);
    }
}

// Complejidad: O(n^(log 3 / log 1.5))

// Implementación del programa del factorial recursivo

int factorial(int n) {
    if (n == 0)
        return 1;
    return n * factorial(n - 1);
}

// Complejidad: O(n)

// Implementación del programa de Fibonacci

int fibonacci(int n) {
    if (n <= 1)
        return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

// Complejidad: O(2^n)

